apiVersion: v1
kind: Namespace
metadata:
  name: gomud
  "annotations": { linkerd.io/inject: enabled }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-api
  namespace: gomud
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
spec:
  rules:
  - http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: service-api
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-websocket
  namespace: gomud
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/server-snippets: |
      location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        }
spec:
  rules:
  - http:
      paths:
      - path: /game
        pathType: Prefix
        backend:
          service:
            name: service-mud
            port:
              number: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: service-api
  namespace: gomud
spec:
  type: ClusterIP
  selector:
    app: app-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: service-mud
  namespace: gomud
spec:
  type: ClusterIP
  selector:
    app: app-mud
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: service-user
  namespace: gomud
spec:
  type: ClusterIP
  selector:
    app: app-user
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-app-api
  namespace: gomud
spec:
  selector:
    matchLabels:
      app: app-api
  replicas: 1
  template:
    metadata:
      labels:
        app: app-api
    spec:
      containers:
        - name: api
          image: api:latest
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "128Mi"
              cpu: "200m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-app-mud
  namespace: gomud
spec:
  selector:
    matchLabels:
      app: app-mud
  replicas: 1
  template:
    metadata:
      labels:
        app: app-mud
    spec:
      containers:
        - name: mud
          image: mud:latest
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "128Mi"
              cpu: "200m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-app-user
  namespace: gomud
spec:
  selector:
    matchLabels:
      app: app-user
  replicas: 1
  template:
    metadata:
      labels:
        app: app-user
    spec:
      containers:
        - name: user
          image: user:latest
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "128Mi"
              cpu: "200m"
